---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

// Add type definitions for environment variables
declare const process: {
  env: {
    NODE_ENV: 'development' | 'production';
  };
};

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => {
    // In development or if not a draft
    return process.env.NODE_ENV === 'development' || !data.draft;
  });
  
  // Debug: log the generated slugs
  console.log('Generated blog post slugs:', posts.map(post => post.id));

  return posts.map((post) => ({
    params: { slug: post.id.replace(/\.md$/, '') },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();

// Get related posts (excluding current post)
const allPosts = (await getCollection('blog'))
  .filter(p => p.id !== post.id && (process.env.NODE_ENV === 'development' || !p.data.draft));

// Calculate relatedness score based on tag overlap
const getRelatednessScore = (post1: any, post2: any) => {
  const tags1 = post1.data.tags || [];
  const tags2 = post2.data.tags || [];
  const commonTags = tags1.filter((tag: string) => tags2.includes(tag));
  return commonTags.length;
};

// Sort by relatedness score (tag overlap) and then by date
const relatedPosts = allPosts
  .map(p => ({
    post: p,
    score: getRelatednessScore(post, p)
  }))
  .sort((a, b) => {
    // First sort by relatedness score (descending)
    if (b.score !== a.score) {
      return b.score - a.score;
    }
    // Then by date (newest first)
    return b.post.data.pubDate.valueOf() - a.post.data.pubDate.valueOf();
  })
  .slice(0, 3)
  .map(item => item.post);

// Calculate reading time if not provided
const readingTime = post.data.readingTime || 
  Math.max(1, Math.round(post.body.split(/\s+/).length / 200));
---

<Layout 
  title={post.data.title}
  description={post.data.description}
  image={typeof post.data.image === 'string' ? post.data.image : post.data.image?.url}
  canonical={`/blog/${post.id.replace(/\.md$/, '')}`}
>
  <article class="bg-white">
    {/* Featured Image */}
    {typeof post.data.image === 'string' ? (
      <div class="relative h-64 md:h-96 w-full">
        <img
          src={post.data.image}
          alt={('imageAlt' in post.data ? String(post.data.imageAlt) : post.data.title)}
          class="w-full h-full object-cover"
        />
        <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
      </div>
    ) : post.data.image ? (
      <div class="relative h-64 md:h-96 w-full">
        <img
          src={post.data.image.url}
          alt={post.data.image.alt || post.data.title}
          class="w-full h-full object-cover"
        />
        <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
      </div>
    ) : null}

    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <div class="max-w-3xl mx-auto">
        {/* Post Header */}
        <header class="mb-12 text-center">
          <div class="flex justify-center space-x-2 mb-4">
            {post.data.tags?.slice(0, 2).map((tag: string) => (
              <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800">
                {tag}
              </span>
            ))}
          </div>
          <h1 class="text-4xl md:text-5xl font-extrabold text-gray-900 mb-6">
            {post.data.title}
          </h1>
          <p class="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
            {post.data.description}
          </p>
          
          <div class="flex items-center justify-center space-x-6 text-sm text-gray-500">
            <div class="flex items-center">
              <svg class="h-5 w-5 mr-1.5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              {readingTime} min read
            </div>
            <div class="flex items-center">
              <svg class="h-5 w-5 mr-1.5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <time datetime={post.data.pubDate.toISOString()}>
                {new Date(post.data.pubDate).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                })}
              </time>
            </div>
            {post.data.author && (
              <div class="flex items-center">
                <svg class="h-5 w-5 mr-1.5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                {post.data.author}
              </div>
            )}
          </div>
        </header>

        {/* Post Content */}
        <div class="prose prose-indigo prose-lg max-w-none">
          <Content />
        </div>

        {/* Tags */}
        {post.data.tags && post.data.tags.length > 0 && (
          <div class="mt-12 pt-8 border-t border-gray-200">
            <h3 class="text-sm font-medium text-gray-500 mb-4">TAGGED IN</h3>
            <div class="flex flex-wrap gap-2">
              {post.data.tags.map((tag: string, index: number) => (
                <a 
                  href={`/blog?tag=${tag.toLowerCase()}`} 
                  class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800 hover:bg-gray-200 transition-colors"
                >
                  {tag}
                </a>
              ))}
            </div>
          </div>
        )}

        {/* Author Bio */}
        {post.data.author && (
          <div class="mt-12 pt-8 border-t border-gray-200">
            <div class="flex items-center">
              <div class="h-16 w-16 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-600 text-2xl font-bold">
                {post.data.author.charAt(0)}
              </div>
              <div class="ml-4">
                <h3 class="text-lg font-medium text-gray-900">{post.data.author}</h3>
                <p class="text-gray-600">
                  {post.data.author === 'John Doe' 
                    ? 'Founder & CEO of Nexus Remote Hub. Passionate about remote work and digital nomad lifestyle.'
                    : 'Contributor at Nexus Remote Hub.'}
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Related Posts */}
        {relatedPosts.length > 0 && (
          <div class="mt-16">
            <h2 class="text-2xl font-bold text-gray-900 mb-8">You might also like</h2>
            <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
              {relatedPosts.map((relatedPost) => (
                <article class="flex flex-col overflow-hidden rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                  {typeof relatedPost.data.image === 'string' ? (
                    <div class="flex-shrink-0 h-48">
                      <img 
                        class="w-full h-full object-cover" 
                        src={relatedPost.data.image} 
                        alt={('imageAlt' in relatedPost.data ? String(relatedPost.data.imageAlt) : relatedPost.data.title)}
                      />
                    </div>
                  ) : relatedPost.data.image ? (
                    <div class="flex-shrink-0 h-48">
                      <img 
                        class="w-full h-full object-cover" 
                        src={relatedPost.data.image.url} 
                        alt={relatedPost.data.image.alt || relatedPost.data.title}
                      />
                    </div>
                  ) : null}
                  <div class="flex-1 bg-white p-6 flex flex-col">
                    <div class="flex-1">
                      <p class="text-sm font-medium text-indigo-600">
                        {relatedPost.data.tags?.[0] || 'Article'}
                      </p>
                      <a href={`/blog/${relatedPost.id.replace(/\.md$/, '')}`} class="block mt-2">
                        <h3 class="text-xl font-semibold text-gray-900 hover:text-indigo-600 transition-colors">
                          {relatedPost.data.title}
                        </h3>
                        <p class="mt-3 text-base text-gray-500 line-clamp-2">
                          {relatedPost.data.description}
                        </p>
                      </a>
                    </div>
                    <div class="mt-6 flex items-center">
                      <div class="flex-shrink-0">
                        <div class="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-600 font-medium">
                          {relatedPost.data.author?.charAt(0) || 'A'}
                        </div>
                      </div>
                      <div class="ml-3">
                        <p class="text-sm font-medium text-gray-900">
                          {relatedPost.data.author || 'Anonymous'}
                        </p>
                        <div class="flex space-x-1 text-sm text-gray-500">
                          <time datetime={relatedPost.data.pubDate.toISOString()}>
                            {new Date(relatedPost.data.pubDate).toLocaleDateString('en-US', {
                              month: 'short',
                              day: 'numeric',
                              year: 'numeric',
                            })}
                          </time>
                        </div>
                      </div>
                    </div>
                  </div>
                </article>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  </article>
</Layout>

<style>
  /* Custom prose styles */
  .prose {
    color: #374151;
  }
  .prose h2 {
    margin-top: 2em;
    margin-bottom: 1em;
    font-weight: 700;
    color: #111827;
  }
  .prose h3 {
    margin-top: 1.5em;
    margin-bottom: 0.75em;
    font-weight: 600;
    color: #1f2937;
  }
  .prose p {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
    line-height: 1.7;
  }
  .prose a {
    color: #4f46e5;
    text-decoration: none;
    font-weight: 500;
  }
  .prose a:hover {
    text-decoration: underline;
  }
  .prose img {
    border-radius: 0.5rem;
    margin-top: 1.5em;
    margin-bottom: 1.5em;
  }
  .prose ul,
  .prose ol {
    margin-top: 1.25em;
    margin-bottom: 1.25em;
    padding-left: 1.625em;
  }
  .prose li {
    margin-top: 0.5em;
    margin-bottom: 0.5em;
  }
  .prose blockquote {
    border-left: 4px solid #e5e7eb;
    padding-left: 1.5rem;
    font-style: italic;
    color: #4b5563;
    margin: 1.5em 0;
  }
  .prose code {
    background-color: #f3f4f6;
    border-radius: 0.25rem;
    padding: 0.25rem 0.5rem;
    font-size: 0.875em;
  }
  .prose pre {
    background-color: #1f2937;
    color: #f9fafb;
    border-radius: 0.5rem;
    padding: 1rem;
    overflow-x: auto;
    margin: 1.5em 0;
  }
  .prose pre code {
    background-color: transparent;
    padding: 0;
    border-radius: 0;
    font-size: 0.875em;
  }
  .prose hr {
    border-top: 1px solid #e5e7eb;
    margin: 3em 0;
  }
</style>
